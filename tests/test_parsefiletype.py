import dbparseimport inspectfrom dbparse import ParseFileTypedef test_parsefiletype():    pfts = []    pft = ParseFileType(inputName=["Artist", "Extra"], parseName="Artist",                        inputType="General",                        outputName=[None, "ShuffleAlbum"], outputLevel=[0, 2],                        outputFormat=["DataFrame", "Series"])    pfts.append(pft)        pft = ParseFileType(inputName="SearchArtist", parseName="Artist",                        inputType="DataFrame",                        outputName="Artist", outputLevel=1, outputFormat="Series")    pfts.append(pft)        pft = ParseFileType(inputName="ArtistAlbum", parseName="ArtistAlbum",                        inputType="Series",                        outputName=["ArtistAlbumMap", "ShuffleAlbum"],                        outputLevel=[1, 2], outputFormat=["Series", "Series"])    pfts.append(pft)        for pft in pfts:        assert isinstance(pft.getOutput(), dict), f"output [{pft.getOutput()}] is not a dict"        assert hasattr(pft, "parseClassName"), f"[{pft}] does not have a parseClassName attr"        parseClassName = getattr(pft, "parseClassName")        assert isinstance(parseClassName, str), f"pft [{pft}] parseClassName is not a str"        parseClass = getattr(dbparse, parseClassName)        assert inspect.isclass(parseClass), f'parseClass [{pft.parseClassName}] is not a class'        assert hasattr(parseClass, "parse"), f"parse Class [{parseClassName}] does not have a parse function"if __name__ == "__main__":    test_parsefiletype()