""" Parsing Statistics """__all__ = ["ParseStats"]from functools import partial################################################################################# Parse Statistics################################################################################class ParseStats:    def __repr__(self):        return f"ParseStats(name={self.name})"        def __init__(self, name):        self.files = 0        self.good = 0        self.bad = 0        self.output = {}                self.clsVars = list(vars(self).keys())        for attr in self.clsVars:            exec(f"self.add{attr.title()} = partial(self.addValue, attr=attr)")            exec(f"self.set{attr.title()} = partial(self.setValue, attr=attr)")                self.name = name            def addValue(self, attr: str) -> 'None':        attrVal = getattr(self, attr)        assert isinstance(attrVal, int), f"attr [{attr}] is not an int"        setattr(self, attr, attrVal + 1)            def setValue(self, val, attr: str) -> 'None':        assert hasattr(self, attr), f"ParseStats does not know about [{attr}]"        assert isinstance(val, int), f"val [{val}] is not an int"        setattr(self, attr, val)            def showBasic(self) -> 'None':        sVal = []        for attr in self.clsVars:            attrVals = getattr(self, attr)            if isinstance(attrVals, dict):                continue            fkey = f"{str(attr).title()}"            sVal.append(f"{fkey}={attrVals}")        print(" / ".join(sVal))            def show(self) -> 'None':        maxLen = 0        for attr in self.clsVars:            attrVals = getattr(self, attr)            if isinstance(attrVals, dict):                maxLen = max([maxLen, max([len(str(key)) + 6 for key in attrVals.keys()])])            else:                maxLen = max([maxLen, len(str(attr)) + 3])        maxLen += 1                    print(self.__repr__())        for attr in self.clsVars:            attrVals = getattr(self, attr)            if isinstance(attrVals, dict):                print(f"   {attr.title()}")                if len(attrVals) == 0:                    continue                for key, val in attrVals.items():                    fkey = f"      {str(key)}"                    print(f"{fkey: <{maxLen}}: {val}")            else:                fkey = f"   {str(attr).title()}"                print(f"{fkey: <{maxLen}}: {attrVals}")        