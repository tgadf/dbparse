""" Base Class For Parsing General ModVal Data """__all__ = ["ParseGeneralDataIO"]from dbbase import MusicDBRootDataIOfrom utils import Timestat, FileIOfrom .parsedataiobase import ParseDataIOBasefrom .parsestats import ParseStatsfrom .parsefiletype import ParseFileType################################################################################ General Parse (e.g., Series, dict)###############################################################################class ParseGeneralDataIO(ParseDataIOBase):    def __repr__(self):        return f"ParseGeneralDataIO(db={self.dataio.db})"            def __init__(self, rdio: MusicDBRootDataIO, rawio, parseType: ParseFileType, **kwargs):        super().__init__(rdio, rawio, **kwargs)        self.parseType = parseType                if self.verbose:            print(f"  {'ParseGeneralDataIO:': <25} [{parseType.inputName}] => [{parseType.outputName}]")                    def parse(self, modVal=None, **kwargs) -> 'None':        verbose = kwargs.get('verbose', self.verbose)        force = kwargs.get('force', False)        test = kwargs.get('test', False)        force = True if test is True else force        assert isinstance(modVal, int), f"ModVal [{modVal}] is not an int"        assert isinstance(self.parseType, ParseFileType), f"parseType [{self.parseType}] is not a ParseFileType"        io = FileIO()        rawParser = self.getRawParser(self.parseType)        pstats = ParseStats(name=f"{modVal}")                newFiles = self.getRawFiles(modVal, self.parseType, force=force)        if len(newFiles) == 0:            print("  No files to parse. Returning.")            return        newFiles = [newFiles[0]] if test is True else newFiles                self.pdfio.getInput(modVal, self.parseType, pstats, force=force)        tscmt = f"Parsing {self.db} ModVal={modVal} [Raw {self.parseType.inputName}] => [ModVal {self.parseType.outputName}] (N={len(newFiles)})"        ts = Timestat(tscmt, verbose=verbose)        for n, ifile in enumerate(newFiles):            pstats.addFiles()            if self.isUpdateModVal(n):                ts.update(n=n + 1, N=len(newFiles))            globData = io.get(ifile)            assert isinstance(globData, dict), f"Glob data from [{ifile}] is type [{type(globData)}] and not dict"            for fid, fdata in globData.items():                rData = rawParser(fid, fdata, ifile)                status = self.pdfio.updateModValData(rData, self.parseType)                if status is True:                    pstats.addGood()                else:                    pstats.addBad()                            self.pdfio.getEndStats(pstats)        if pstats.good == 0:            if verbose:                print(f"  ==> Not Saving {self.parseType.outputName} ModVal={modVal} Data.")            return                ##############################        # Save Output        ##############################        if test is True:            print("  ==> Only testing. Will not save.")        else:            self.pdfio.saveOutput(modVal, self.parseType, pstats, force=force)                    ts.stop()        